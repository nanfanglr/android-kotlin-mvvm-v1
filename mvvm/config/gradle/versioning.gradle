ext.versions = [
        // General
        compileSdkVersion      : 28,
        minSdkVersion          : 16,
        targetSdkVersion       : 28,
        // Kotlin
        kotlinVersion          : '1.3.41',
        //test
        jUnit                  : '4.12',
        mockito                : '2.6.3',

        // Libraries
        appcompatVersion       : '28.0.0',
        constraintLayoutVersion: '1.1.3',
        multidexVersion        : '1.0.1',
        testVersion            : '1.0.2',
        espressoVersion        : '3.0.2',
        lifecycleVersion       : '1.1.1',


        timber                 : '4.7.0',

        dagger                 : '2.24',
        retrofit               : '2.2.0',
        rxJava                 : '2.2.0',
        rxAndroid              : '2.0.2',
        loggingInterceptor     : '3.4.2',

        glide                  : '4.8.0',
        stetho                 : '1.5.1',

        leakcanary             : '1.6.1',
        BRVAH                  : '2.9.46',
        SmartRefresh           : '1.1.0-alpha-14',
        greendao               : '3.2.2',
        eventbus               : '3.1.1',
        rxBinding              : '2.1.1',
        photoview              : '1.4.1',
        zxing                  : '3.3.0',
        zxingandroidembedded   : '3.6.0',
        easypermissions        : "1.3.0",
        PictureSelector        : 'v2.2.3',
        aliyunOss              : '2.9.1',
        //https://github.com/hdodenhof/CircleImageView
        circleimageview        : '3.0.0',
        //Android-PickerView
        androidpickerView      : '4.1.7'

]

ext {
    /**
     * Builds an Android version code from the version of the project. 2 digits for major version, 2 for minor and 2 for patches. The last
     * 4 digits are the CI build number. e.g. version 3.5.12 and build number 1344 would create a versionCode: 03051201344
     */
    buildVersionCode = {
        def (major, minor, patch) = version.toLowerCase().replaceAll('-', '').tokenize('.')
        (major, minor, patch, candidate) = [major, minor, patch].collect { it.toInteger() }
        (major * 100000000) + (minor * 1000000) + (patch * 10000) + buildNumber.toInteger();
    }

}